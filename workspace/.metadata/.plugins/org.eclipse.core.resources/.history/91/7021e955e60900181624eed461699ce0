package test;

import archivos.Lector;
import archivos.Matriz;
import monitor.RdP;

import org.junit.BeforeClass;
import org.junit.Test;

import java.util.HashMap;

import org.junit.Assert;
import org.junit.Before;


public class TestUnitario {
	
	private static Matriz marcadoInicial, tinvariantes, tranSencib, marcado;
	private static HashMap<String, Matriz> hash;
	private static Lector lector;
	private static RdP rdp;


	@BeforeClass
	public static void test() throws Exception {
		lector = new Lector();
		rdp = new RdP();
		hash = lector.cargarDatos();
	}

	@Before
	public void carga() {
		marcadoInicial = hash.get("marcado");
		tinvariantes = hash.get("tinvariantes");
		tranSencib = calcularTranSencib();		
	}

	@Test
	public void testGetSensibilizadas() { 
		Matriz vs = rdp.getVectorSencibilizadas();
		comparar(tranSencib, vs);
	}
	
	@Test
	public void testDispararSensibilizada() {
		 
		
	}
	
	public Matriz calcularTranSencib() {
		
		Matriz sencib = new Matriz(1, tinvariantes.getColumnas());
		
		//Recorre los distintos T-Invariantes
		for ( int i = 0 ; i < tinvariantes.getFilas() ; i++ ) {
			//Recorre cada vector T-Invariante
			for ( int j = 0 ; j < tinvariantes.getColumnas() ; j++ ) {
				//Si encuentra un 1, setea un 1 en la posición y sigue con el otro T-Invariante
				if ( tinvariantes.getValor(i, j) == 1 ) {
					sencib.setValor(0, j, 1);
					break;
				}
			}
		}
		return sencib;
	}
	
	//Funcion general para hacer Asserts
	public void comparar(Matriz a, Matriz b) {
		for ( int i = 0 ; i < a.getColumnas() ; i++ ) {
			Assert.assertEquals(a.getValor(0, i), b.getValor(0, i));
		}	
	}

}
